generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
   directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  studentId    Int?
  major        String?
  phoneNumber  Int?
  comments     Comment[]
  events       Event[]        @relation("UserEvents")
  joined_event Joined_Event[]
  roles        Role[]         @relation("UserRoles")
  userMembers  User_Member[]
  clubs        Club_Owners[]       
}

model Role {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  user   User   @relation("UserRoles", fields: [userId], references: [id])
}

model Event {
  id           Int            @id @default(autoincrement())
  event_name   String
  event_desc   String
  posters      String[]
  event_date   DateTime?
  faculty      String?
  floor        String?
  room         String?
  image        String?       
  created_time DateTime       @default(now())
  userId       Int
  comments     Comment[]
  user         User           @relation("UserEvents", fields: [userId], references: [id])
  creatorName  String?
  joined_users Joined_Event[] @relation("JoinedEventToEvent")
  clubId       Int?
  club         Club?           @relation("ClubToEvent", fields: [clubId], references: [id])
  tags         Tag[]          @relation("EventToTag")
}

model Comment {
  id           Int      @id @default(autoincrement())
  text         String
  creatorName  String
  created_time DateTime @default(now())
  userId       Int
  eventId      Int
  event        Event    @relation(fields: [eventId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[] @relation("EventToTag")
}

model Joined_Event {
  id      Int   @id @default(autoincrement())
  eventId Int
  userId  Int
  event   Event @relation("JoinedEventToEvent", fields: [eventId], references: [id])
  user    User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
}

model Club {
  id            Int           @id @default(autoincrement())
  name          String
  desc          String
  instagram     String?
  whatsapp      String?
  facebook      String?
  linkedIn      String?
  eventsCount   Int?        @default(0)
  membersCount  Int?        @default(0)
  posters       String[]
  userMembers   User_Member[] 
  events        Event[]        @relation("ClubToEvent") 
  owners        Club_Owners[]       
}

model User_Member {
  id       Int      @id @default(autoincrement())
  userId   Int
  clubId   Int
  joinedAt DateTime @default(now())
  isActive Boolean  @default(true)
  isJoined Boolean  @default(false)
  club     Club     @relation(fields: [clubId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@unique([userId, clubId])
}

model Club_Owners { 
  id     Int  @id @default(autoincrement())
  userId Int  
  clubId Int
  user   User @relation(fields: [userId], references: [id])
  club   Club @relation(fields: [clubId], references: [id])

  @@unique([userId, clubId])
}