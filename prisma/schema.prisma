// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String
  password      String
  roles         Role[]    @relation("UserRoles")
  events        Event[]   @relation("UserEvents")
  comments      Comment[]
  joined_event  Joined_Event[]
  userMembers  User_Member[]
}

model Role {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int
  user   User   @relation(fields: [userId], references: [id], name: "UserRoles")
}

model Event {
  id           Int              @id @default(autoincrement())
  event_name   String
  event_desc   String
  posters      String[]
  tags         Tag[]       
  comments     Comment[]       
  created_time DateTime         @default(now())
  userId       Int
  user         User             @relation("UserEvents", fields: [userId], references: [id]) 
  joined_users Joined_Event[]   @relation("JoinedEventToEvent")
  club         Club[] 
}

model Comment {
  id          Int      @id @default(autoincrement())
  text        String
  created_time DateTime @default(now()) 
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  eventId     Int      
  event       Event    @relation(fields: [eventId], references: [id]) 
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String
  events Event[] 
}

model Joined_Event {
  id       Int      @id @default(autoincrement())
  eventId  Int
  event    Event    @relation("JoinedEventToEvent", fields: [eventId], references: [id]) 
  userId   Int
  user     User     @relation(fields: [userId], references: [id])

  @@unique([eventId, userId]) 
}

model Club {
  id           Int             @id @default(autoincrement())
  name         String
  events       Event[]
  userMembers  User_Member[]
}

model User_Member {
  id        Int       @id @default(autoincrement())
  userId    Int
  clubId    Int
  joinedAt  DateTime   @default(now())
  isActive  Boolean    @default(true)

  user      User       @relation(fields: [userId], references: [id])
  club      Club       @relation(fields: [clubId], references: [id])

  @@unique([userId, clubId]) 
}